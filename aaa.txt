pthread_create(&thread, NULL, thread_func, NULL);                // Create a new thread
pthread_detach(thread);                                          // Detach the thread (no need to join later)
pthread_join(thread, NULL);                                      // Wait for the thread to finish

pthread_mutex_init(&my_mutex, NULL);                             // Initialize the mutex
pthread_mutex_destroy(&my_mutex);                                // Destroy the mutex when done
pthread_mutex_lock(&my_mutex);                                   // Lock the mutex before accessing shared data
pthread_mutex_unlock(&my_mutex);                                 // Unlock the mutex after done with shared data


---------------------------
int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);

	pthread_create(&thread, NULL, thread_func, NULL);

	Parameter	Description:

	- &thread:	Pointer to a pthread_t variable — will hold the new thread’s ID
	- NULL:	Attributes for the thread (pass NULL for default attributes)
	- thread_func:	Function that the thread will run (must match void *(*)(void *) signature)
	- NULL:	Argument passed to the thread function (can be any pointer)




int pthread_detach(pthread_t thread);

	pthread_detach(thread);

	Parameter	Description
	- thread	The thread you want to detach — system will reclaim resources automatically




pthread_join(thread, NULL);

	int pthread_join(pthread_t thread, void **retval);

	Parameter	Description:
	- thread:	The thread to wait for
	- NULL:	You can pass a pointer to receive the thread’s return value (or NULL if unused)




nao esquecer:

- adicionar cores